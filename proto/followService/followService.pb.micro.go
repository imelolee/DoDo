// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/followService.proto

package followService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FollowService service

func NewFollowServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FollowService service

type FollowService interface {
	IsFollowing(ctx context.Context, in *UserTargetReq, opts ...client.CallOption) (*BoolRsp, error)
	GetFollowerCnt(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*CountRsp, error)
	GetFollowingCnt(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*CountRsp, error)
	AddFollowRelation(ctx context.Context, in *UserTargetReq, opts ...client.CallOption) (*BoolRsp, error)
	DeleteFollowRelation(ctx context.Context, in *UserTargetReq, opts ...client.CallOption) (*BoolRsp, error)
	GetFollowing(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*UserListRsp, error)
	GetFollowers(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*UserListRsp, error)
}

type followService struct {
	c    client.Client
	name string
}

func NewFollowService(name string, c client.Client) FollowService {
	return &followService{
		c:    c,
		name: name,
	}
}

func (c *followService) IsFollowing(ctx context.Context, in *UserTargetReq, opts ...client.CallOption) (*BoolRsp, error) {
	req := c.c.NewRequest(c.name, "FollowService.IsFollowing", in)
	out := new(BoolRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followService) GetFollowerCnt(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*CountRsp, error) {
	req := c.c.NewRequest(c.name, "FollowService.GetFollowerCnt", in)
	out := new(CountRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followService) GetFollowingCnt(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*CountRsp, error) {
	req := c.c.NewRequest(c.name, "FollowService.GetFollowingCnt", in)
	out := new(CountRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followService) AddFollowRelation(ctx context.Context, in *UserTargetReq, opts ...client.CallOption) (*BoolRsp, error) {
	req := c.c.NewRequest(c.name, "FollowService.AddFollowRelation", in)
	out := new(BoolRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followService) DeleteFollowRelation(ctx context.Context, in *UserTargetReq, opts ...client.CallOption) (*BoolRsp, error) {
	req := c.c.NewRequest(c.name, "FollowService.DeleteFollowRelation", in)
	out := new(BoolRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followService) GetFollowing(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*UserListRsp, error) {
	req := c.c.NewRequest(c.name, "FollowService.GetFollowing", in)
	out := new(UserListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followService) GetFollowers(ctx context.Context, in *UserIdReq, opts ...client.CallOption) (*UserListRsp, error) {
	req := c.c.NewRequest(c.name, "FollowService.GetFollowers", in)
	out := new(UserListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FollowService service

type FollowServiceHandler interface {
	IsFollowing(context.Context, *UserTargetReq, *BoolRsp) error
	GetFollowerCnt(context.Context, *UserIdReq, *CountRsp) error
	GetFollowingCnt(context.Context, *UserIdReq, *CountRsp) error
	AddFollowRelation(context.Context, *UserTargetReq, *BoolRsp) error
	DeleteFollowRelation(context.Context, *UserTargetReq, *BoolRsp) error
	GetFollowing(context.Context, *UserIdReq, *UserListRsp) error
	GetFollowers(context.Context, *UserIdReq, *UserListRsp) error
}

func RegisterFollowServiceHandler(s server.Server, hdlr FollowServiceHandler, opts ...server.HandlerOption) error {
	type followService interface {
		IsFollowing(ctx context.Context, in *UserTargetReq, out *BoolRsp) error
		GetFollowerCnt(ctx context.Context, in *UserIdReq, out *CountRsp) error
		GetFollowingCnt(ctx context.Context, in *UserIdReq, out *CountRsp) error
		AddFollowRelation(ctx context.Context, in *UserTargetReq, out *BoolRsp) error
		DeleteFollowRelation(ctx context.Context, in *UserTargetReq, out *BoolRsp) error
		GetFollowing(ctx context.Context, in *UserIdReq, out *UserListRsp) error
		GetFollowers(ctx context.Context, in *UserIdReq, out *UserListRsp) error
	}
	type FollowService struct {
		followService
	}
	h := &followServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FollowService{h}, opts...))
}

type followServiceHandler struct {
	FollowServiceHandler
}

func (h *followServiceHandler) IsFollowing(ctx context.Context, in *UserTargetReq, out *BoolRsp) error {
	return h.FollowServiceHandler.IsFollowing(ctx, in, out)
}

func (h *followServiceHandler) GetFollowerCnt(ctx context.Context, in *UserIdReq, out *CountRsp) error {
	return h.FollowServiceHandler.GetFollowerCnt(ctx, in, out)
}

func (h *followServiceHandler) GetFollowingCnt(ctx context.Context, in *UserIdReq, out *CountRsp) error {
	return h.FollowServiceHandler.GetFollowingCnt(ctx, in, out)
}

func (h *followServiceHandler) AddFollowRelation(ctx context.Context, in *UserTargetReq, out *BoolRsp) error {
	return h.FollowServiceHandler.AddFollowRelation(ctx, in, out)
}

func (h *followServiceHandler) DeleteFollowRelation(ctx context.Context, in *UserTargetReq, out *BoolRsp) error {
	return h.FollowServiceHandler.DeleteFollowRelation(ctx, in, out)
}

func (h *followServiceHandler) GetFollowing(ctx context.Context, in *UserIdReq, out *UserListRsp) error {
	return h.FollowServiceHandler.GetFollowing(ctx, in, out)
}

func (h *followServiceHandler) GetFollowers(ctx context.Context, in *UserIdReq, out *UserListRsp) error {
	return h.FollowServiceHandler.GetFollowers(ctx, in, out)
}
