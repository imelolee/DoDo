// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/videoService.proto

package videoService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VideoService service

func NewVideoServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VideoService service

type VideoService interface {
	Feed(ctx context.Context, in *FeedReq, opts ...client.CallOption) (*FeedRsp, error)
	GetVideo(ctx context.Context, in *GetVideoReq, opts ...client.CallOption) (*GetVideoRsp, error)
	Publish(ctx context.Context, in *PublishReq, opts ...client.CallOption) (*PublishRsp, error)
	GetPublishList(ctx context.Context, in *PublishListReq, opts ...client.CallOption) (*PublishListRsp, error)
	GetVideoIdList(ctx context.Context, in *VideoIdReq, opts ...client.CallOption) (*VideoIdRsp, error)
}

type videoService struct {
	c    client.Client
	name string
}

func NewVideoService(name string, c client.Client) VideoService {
	return &videoService{
		c:    c,
		name: name,
	}
}

func (c *videoService) Feed(ctx context.Context, in *FeedReq, opts ...client.CallOption) (*FeedRsp, error) {
	req := c.c.NewRequest(c.name, "VideoService.Feed", in)
	out := new(FeedRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) GetVideo(ctx context.Context, in *GetVideoReq, opts ...client.CallOption) (*GetVideoRsp, error) {
	req := c.c.NewRequest(c.name, "VideoService.GetVideo", in)
	out := new(GetVideoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) Publish(ctx context.Context, in *PublishReq, opts ...client.CallOption) (*PublishRsp, error) {
	req := c.c.NewRequest(c.name, "VideoService.Publish", in)
	out := new(PublishRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) GetPublishList(ctx context.Context, in *PublishListReq, opts ...client.CallOption) (*PublishListRsp, error) {
	req := c.c.NewRequest(c.name, "VideoService.GetPublishList", in)
	out := new(PublishListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoService) GetVideoIdList(ctx context.Context, in *VideoIdReq, opts ...client.CallOption) (*VideoIdRsp, error) {
	req := c.c.NewRequest(c.name, "VideoService.GetVideoIdList", in)
	out := new(VideoIdRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoService service

type VideoServiceHandler interface {
	Feed(context.Context, *FeedReq, *FeedRsp) error
	GetVideo(context.Context, *GetVideoReq, *GetVideoRsp) error
	Publish(context.Context, *PublishReq, *PublishRsp) error
	GetPublishList(context.Context, *PublishListReq, *PublishListRsp) error
	GetVideoIdList(context.Context, *VideoIdReq, *VideoIdRsp) error
}

func RegisterVideoServiceHandler(s server.Server, hdlr VideoServiceHandler, opts ...server.HandlerOption) error {
	type videoService interface {
		Feed(ctx context.Context, in *FeedReq, out *FeedRsp) error
		GetVideo(ctx context.Context, in *GetVideoReq, out *GetVideoRsp) error
		Publish(ctx context.Context, in *PublishReq, out *PublishRsp) error
		GetPublishList(ctx context.Context, in *PublishListReq, out *PublishListRsp) error
		GetVideoIdList(ctx context.Context, in *VideoIdReq, out *VideoIdRsp) error
	}
	type VideoService struct {
		videoService
	}
	h := &videoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VideoService{h}, opts...))
}

type videoServiceHandler struct {
	VideoServiceHandler
}

func (h *videoServiceHandler) Feed(ctx context.Context, in *FeedReq, out *FeedRsp) error {
	return h.VideoServiceHandler.Feed(ctx, in, out)
}

func (h *videoServiceHandler) GetVideo(ctx context.Context, in *GetVideoReq, out *GetVideoRsp) error {
	return h.VideoServiceHandler.GetVideo(ctx, in, out)
}

func (h *videoServiceHandler) Publish(ctx context.Context, in *PublishReq, out *PublishRsp) error {
	return h.VideoServiceHandler.Publish(ctx, in, out)
}

func (h *videoServiceHandler) GetPublishList(ctx context.Context, in *PublishListReq, out *PublishListRsp) error {
	return h.VideoServiceHandler.GetPublishList(ctx, in, out)
}

func (h *videoServiceHandler) GetVideoIdList(ctx context.Context, in *VideoIdReq, out *VideoIdRsp) error {
	return h.VideoServiceHandler.GetVideoIdList(ctx, in, out)
}
